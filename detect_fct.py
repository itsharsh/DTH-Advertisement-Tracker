# -*- coding: utf-8 -*-
"""Logger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nb_ghT2D5B9dCU9cFUfcoZLCEvjkMryw
"""

import cv2
import logging
from skimage.measure import compare_ssim as ssim

videoPath = "D:\Office\Backup\Projects Data\AI\AdTracker\DTH"
originalFileName = "20191218-135227.mp4"
clipFileName = "20191218-135227-2137-2152-1Mg-Star Sports 1 Hindi.mp4"

import cv2
from skimage.measure import compare_ssim as ssim
import logging
import datetime
import csv
from time import process_time
import detect_db
start_time = process_time()
# clip="test3.mp4"
# source_file="test.mp4"
clip = "/content/drive/My Drive/O2I/Merinolam/Merinolam_FCT.mp4"
source_file = "/content/drive/My Drive/O2I/20200117-131854.mp4"

cap1 = cv2.VideoCapture(source_file)
cap = cv2.VideoCapture(clip)
total_frame = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
total_frame1 = int(cap1.get(cv2.CAP_PROP_FRAME_COUNT))
print(total_frame, total_frame1)
frames_list = []

miscInfo = {
    "channelName": "Star Sports 1",
    "videoName": "20200117-213035.mp4",

    "adType": "Branding",
    "videoFPS": 25,
    "frameToRead": 1  # read every nth frame
}
baseTimestamp = getTimestampFromVideofile(miscInfo["videoName"])
detectionInfo = {"classIndex": "0", "classes": "merinolam", "baseTimestamp": baseTimestamp,
                 "frameDimensions": (256, 256)}
fps = int(cap.get(cv2.CAP_PROP_FPS))
should_restart = True
print(fps)
cap1.set(cv2.CAP_PROP_POS_FRAMES, 65550)
while cap1.isOpened or should_restart:
    t1_start = process_time()
    for i in range(int(cap.get(cv2.CAP_PROP_POS_FRAMES)), 500):
        # cap.set(cv2.CAP_PROP_POS_FRAMES,i)
        ret, frame = cap.read()
        start = process_time()
        for j in range(int(cap1.get(cv2.CAP_PROP_POS_FRAMES)), total_frame1):
            ts = process_time()
            #    cap1.set(cv2.CAP_PROP_POS_FRAMES,j)
            ret1, frame1 = cap1.read()
            #              diff=cv2.subtract(frame,frame1)
            #             b, g, r =cv2.split(diff)
            s = ssim(frame, frame1, multichannel=True)
            if s >= .962:
                print("matched", cap.get(cv2.CAP_PROP_POS_FRAMES), "--", cap1.get(cv2.CAP_PROP_POS_FRAMES), "ssim=", s)
                frames_list.append(cap1.get(cv2.CAP_PROP_POS_FRAMES))
                t = cap1.get(cv2.CAP_PROP_POS_MSEC)
                # time=(datetime.timedelta(milliseconds=t))
                time_list.append(t)
                break
            else:
                print("not matched", cap.get(cv2.CAP_PROP_POS_FRAMES), "--", cap1.get(cv2.CAP_PROP_POS_FRAMES), "ssim=",
                      s)
            stop = process_time()
            tf = stop - start
            # print("time to process single frame",tf)
        t_stop = process_time()
        time = t_stop - t1_start
        print("time to match frames", time)

        updateDB(detectionInfo, miscInfo)
    t1_stop = process_time()
    print("time taken process approx 500 frames", t1_stop - t1_start)
    if cap.get(cv2.CAP_PROP_POS_FRAMES) == total_frame:
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
        should_restart = False
    if cap1.get(cv2.CAP_PROP_POS_FRAMES) == total_frame1:
        break
stop_time = process_time()
extime = stop_time - start_time
print("total time taken to execute", extime)
print(frames_list)
