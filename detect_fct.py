# -*- coding: utf-8 -*-
"""Logger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nb_ghT2D5B9dCU9cFUfcoZLCEvjkMryw
"""
import os
import csv
import datetime
import cv2
import logging
from time import process_time
from skimage.measure import compare_ssim as ssim

import detect_branding
import detect_db
import path_config

videoPath = path_config.originalVideoDir
clipFileName = path_config.brandFCTFilePath

# my dir

#adTrackerDir = r"C:\Users\Hp\Desktop\AdTracker"

#brandName = "Merinolam"
#brandDir = os.path.join(adTrackerDir, "Brand Data", brandName)

#originalVideoDir = os.path.join(adTrackerDir, "DTH", "Original")
#brandFCTFilePath = os.path.join(brandDir, brandName+"_FCT.mp4")

#videoPath = originalVideoDir
#clipFileName = brandFCTFilePath


##########


frames_list = []


miscInfo = {
    "channelName": "tobe",
    "videoName": "20200110-131854.mp4",
    "adType": "FCT",
    "videoFPS": 25,
    "frameToRead": 1  # read every nth frame
}
baseTimestamp = detect_branding.getTimestampFromVideofile(
    miscInfo["videoName"])
detectionInfo = {"classIndex": frames_list, "classes": path_config.brandName, "baseTimestamp": baseTimestamp,
                 "frameDimensions": (256, 256)}


def detectFCT(videoFile, clipFile):

    cap1 = cv2.VideoCapture(videoFile)
    cap = cv2.VideoCapture(clipFile)
    total_frame = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    total_frame1 = int(cap1.get(cv2.CAP_PROP_FRAME_COUNT))
    print(total_frame, total_frame1)
    list1 = []

    fps = int(cap.get(cv2.CAP_PROP_FPS))
    should_restart = True
    print(fps)
#    cap1.set(cv2.CAP_PROP_POS_FRAMES, 65550)
    while cap1.isOpened or should_restart:
        t1_start = process_time()
        for i in range(int(cap.get(cv2.CAP_PROP_POS_FRAMES)), total_frame):
            # cap.set(cv2.CAP_PROP_POS_FRAMES,i)
            ret, frame = cap.read()
            start = process_time()
            for j in range(int(cap1.get(cv2.CAP_PROP_POS_FRAMES)), total_frame1):
                ts = process_time()
                ret1, frame1 = cap1.read()
                s = ssim(frame, frame1, multichannel=True)
                if s >= .962:
                    print("matched", cap.get(cv2.CAP_PROP_POS_FRAMES), "--",
                          cap1.get(cv2.CAP_PROP_POS_FRAMES), "ssim=", s)
                    list1.append(cap1.get(cv2.CAP_PROP_POS_FRAMES))

                    break
                else:
                    print("not matched", cap.get(cv2.CAP_PROP_POS_FRAMES), "--", cap1.get(cv2.CAP_PROP_POS_FRAMES), "ssim=",
                          s)
                    if len(list1) > 0:
                        list2 = list1
                        frames_list.append(list2)
                        print("appended")
                        list1 = []
                stop = process_time()
                tf = stop - start
                # print("time to process single frame",tf)
            t_stop = process_time()
            time = t_stop - t1_start
            print("time to match frames", time)

        #detect_db.updateDB(detectionInfo, miscInfo)
        t1_stop = process_time()
        print("time taken process approx 500 frames", t1_stop - t1_start)
        if cap.get(cv2.CAP_PROP_POS_FRAMES) == total_frame:
            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            should_restart = False
        if cap1.get(cv2.CAP_PROP_POS_FRAMES) == total_frame1:
            break
    stop_time = process_time()
    extime = stop_time - start_time
    print("total time taken to execute", extime)
    print(frames_list)


# for root, subdir, files in os.walk(videoPath, topdown=True):
    # for video in files:
    #videoFile = os.path.join(root, video)
    # print(videoFile)
    start_time = process_time()
    # detectFCT(videoFile, clipFileName)


for i, folder in enumerate(path_config.detectionChannel):

    miscInfo["channelName"] = folder

    file_list = os.listdir(os.path.join(videoPath, folder))
    for file in file_list:

        if file.split("-")[0] == path_config.detectionDate:
            miscInfo["videoName"] = file
            videoFile = os.path.join(videoPath, folder, file)
            start_time = process_time()
            detectFCT(videoFile, clipFileName)
# print(miscInfo)
# print(detectionInfo)
